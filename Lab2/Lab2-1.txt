Lab Task 2 Jan 20th 2020: Protocol design
------------------------------

Specification 1 : Client-Server Set Deduplication/Intersection

Extend the code from the previous task to allow the server to provide an
additional service called "Set Intersection". This is defined as follows:

1. Both client and server generate numbers within a common range.
The size of the lists is same for Specification 1.
2. The client sends her list to the server.
3. The server computes the intersection and sends back the output.

To note: The client needs to indicate the type of service required (Deduplication/Intersection). The server should handle the request appropriately.


Specification 2:  Memory management

Specification 2.1: 
Repeat the above where the client generates a list of unknown (i.e., unknown to the server in advance or not a mutually agreed service) size.
The server needs to be able to handle such cases.

Specification 2.2* (Bonus marks):
Repeat specification 2.2 for peer-to-peer interaction, i.e., select your neighbors machine to provide the service for you. One neighbor is client and other is server. 


Addendum and Notes:

You cannot use the Internet for this project. Try with man pages or trial-and-error.


Introduction to socket programming --Python sockets

Background for this lab task.

Socket is a programming interface for users to develop network programs. A socket creates an identifier that can be used like file identifier, meaning you can read and write into the identifier as you would a file. Operations like closing and opening are also similar.

A socket is characterized by:

domain: the protocols used for transport (AF_INET) (INET stands for Internet)

type: reliable (SOCK_STREAM) unreliable (SOCK_DGRAM) (Transport layer protocol)

protocol: version number of protocol in domain (IPv4 or IPv6)

hostname:  a way  to identify hosts,  a host name, IP address

port: OS level identifier to send and receive data (similar to process ID). A server process "listens" on this port number and a client can receive/send data through this port.

In Python sockets are objects and methods implement the socket functions. 
(Read more about python sockets from: https://docs.python.org/3.0/library/socket.html. Attached)

Reference code to start with.

A. Simple server (store and run as server.py)

#!/usr/bin/python

import socket               # Import socket module

s = socket.socket(socket.AF_INET, socket.SOCK_STREAM, 0)         # Create a socket object
host = socket.gethostbyname(socket.gethostname()) # Get local machine name
port = 12345                # Reserve a port for your service.
s.bind((host, port))        # Bind to the port

print 'host ip', host
s.listen(5)                 # Now wait for client connection.
while True:
   c, addr = s.accept()     # Establish connection with client.
   print 'Got connection from', addr
   c.send('Thank you for connecting')
   c.close()                # Close the connection


B. Simple client (client.py)

#!/usr/bin/python           

import socket               # Import socket module

s = socket.socket()         # Create a socket object
host = socket.gethostname() # Get local machine name/for this example
ports = 12345             #server port
portc = 32451 	   #client's own port for incoming connections (if any)
s.bind((host, portc))
s.connect((host, ports))
print s.recv(1024)
s.close                     # Close the socket when done

# Following would start a server in background.
$ python server.py & 

# Once server is started run client as follows:

$ python client.py
